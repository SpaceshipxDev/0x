{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/hashashin/Documents/godmandatex0/lib/utils.ts"],"sourcesContent":["import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,OAAI,AAAD,EAAE;AACtB","debugId":null}},
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["file:///Users/hashashin/Documents/godmandatex0/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AACA;AACA;AAEA;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACvB,+bACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,aACE;YACF,SACE;YACF,WACE;YACF,OACE;YACF,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AAGF,SAAS,OAAO,EACd,SAAS,EACT,OAAO,EACP,IAAI,EACJ,UAAU,KAAK,EACf,GAAG,OAIF;IACD,MAAM,OAAO,UAAU,gKAAA,CAAA,OAAI,GAAG;IAE9B,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACvD,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":["file:///Users/hashashin/Documents/godmandatex0/components/ui/textarea.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Textarea({ className, ...props }: React.ComponentProps<\"textarea\">) {\n  return (\n    <textarea\n      data-slot=\"textarea\"\n      className={cn(\n        \"border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Textarea }\n"],"names":[],"mappings":";;;;AAEA;;;AAEA,SAAS,SAAS,EAAE,SAAS,EAAE,GAAG,OAAyC;IACzE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EACV,ucACA;QAED,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 113, "column": 0}, "map": {"version":3,"sources":["file:///Users/hashashin/Documents/godmandatex0/components/draggable-thought.tsx"],"sourcesContent":["// components/draggable-thought.tsx \n\n\"use client\"\n\nimport type React from \"react\" // Keep React import\nimport { useEffect, useRef, useState } from \"react\"\nimport { formatDistanceToNow } from \"date-fns\"\nimport { MessageSquare, Send, Trash } from \"lucide-react\"\nimport { AnimatePresence, motion, MotionProps } from \"framer-motion\" // Import MotionProps\n\nimport { Button } from \"@/components/ui/button\"\n// Removed direct import of CanvasBoard types, define/export them here or import from a shared types file\n// Define types here if not shared\nexport type Reply = {\n  id: string\n  content: string\n  createdAt: Date\n}\n\nexport type Thought = {\n  id: string\n  content: string\n  color: string\n  position: { x: number; y: number }\n  rotation: number\n  zIndex: number\n  createdAt: Date\n  replies: Reply[]\n  isNewlyAdded?: boolean\n}\n\n\n// Define the delay constant locally for entrance animation\nconst THOUGHT_ENTRANCE_DELAY = 500 // ms\nconst THOUGHT_ENTRANCE_DURATION = 300 // ms\n\n// Extend props to include layout-related props from Motion\ninterface DraggableThoughtProps extends Omit<MotionProps, 'onDragStart' | 'onDragEnd' | 'onPositionChange'> {\n  thought: Thought\n  isNewlyAdded: boolean\n  onPositionChange: (position: { x: number; y: number }) => void\n  onDelete: () => void\n  onAddReply: (thoughtId: string, content: string) => void\n}\n\n// Use React.forwardRef if you needed to access the DOM node from the parent\nexport default function DraggableThought({\n  thought,\n  isNewlyAdded,\n  onPositionChange,\n  onDelete,\n  onAddReply,\n  // Accept layout related props passed from parent\n  layout,\n  layoutRoot,\n  transition,\n  ...rest // Pass any other motion props down\n}: DraggableThoughtProps) {\n  const [isDragging, setIsDragging] = useState(false)\n  const [showControls, setShowControls] = useState(false)\n  const [isReplying, setIsReplying] = useState(false)\n  const [replyContent, setReplyContent] = useState(\"\")\n  const [showReplies, setShowReplies] = useState(false)\n\n  const thoughtRef = useRef<HTMLDivElement>(null)\n  const replyInputRef = useRef<HTMLTextAreaElement>(null)\n\n  const pinColor = \"bg-amber-500\"\n\n  // Focus reply input when opened\n  useEffect(() => {\n    if (isReplying && replyInputRef.current) {\n      replyInputRef.current.focus()\n    }\n  }, [isReplying])\n\n  // Handle end of drag using Framer Motion\n  const handleDragEnd = (event: MouseEvent | TouchEvent | PointerEvent, info: { point: { x: number, y: number }, offset: { x: number; y: number } }) => {\n    // Framer motion's offset accumulates. We need the final absolute position\n    // relative to the board, not just the offset from the start of the drag.\n    // The initial position is handled by `style`, drag updates transform.\n    // We need to calculate the final absolute position based on the initial position + drag offset\n    const finalPosition = {\n        // Correct calculation using initial position + offset\n       x: thought.position.x + info.offset.x,\n       y: thought.position.y + info.offset.y,\n    }\n    onPositionChange(finalPosition)\n    setIsDragging(false)\n  }\n\n  // Pointer Down Handler for Drag Activation (prevents drag on interactive elements)\n  const handlePointerDown = (e: React.PointerEvent<HTMLDivElement>) => {\n    const targetElement = e.target as HTMLElement\n    // Allow drag ONLY if the target is the draggable element itself or the pin/inner note\n    // Check if the click is on interactive elements like buttons, textarea, or reply content\n    const isInteractive = targetElement.closest('button, textarea, input, .reply-content, a')\n\n    if (isInteractive) {\n      // If it's interactive, prevent drag start completely\n       console.log(\"Pointer down on interactive element, preventing drag start.\");\n       // We might not need to do anything explicit here if dragListener=false handles it\n      return\n    } else {\n       // If clicking on draggable area (note body, pin), allow drag\n       console.log(\"Pointer down on draggable area, allowing drag.\");\n       // Set touchAction to none *on the element that received the pointer down*\n       // This is required for pointer events to work correctly with dragging\n       targetElement.style.touchAction = 'none';\n       // We don't need to manually call startDrag as Framer Motion's listener (even if false initially)\n       // seems to pick it up correctly when pointer events are managed this way.\n    }\n  }\n\n\n  // --- RENDER ---\n  return (\n    // Apply layout props here\n    <motion.div\n      ref={thoughtRef}\n      // Added specific class for parent check in board mouse down\n      className={`thought-draggable-outer absolute flex flex-col ${isDragging ? 'cursor-grabbing' : 'cursor-grab'}`}\n      style={{\n        left: `${thought.position.x}px`, // Use position for initial placement\n        top: `${thought.position.y}px`,\n        zIndex: isDragging ? 10000 : thought.zIndex, // Higher zIndex when dragging\n        width: \"240px\",\n        // Reset transform when not dragging so 'left'/'top' are the source of truth\n        // Framer Motion applies transform during drag\n        transform: isDragging ? undefined : 'translateX(0px) translateY(0px)',\n      }}\n      drag\n      dragMomentum={false}\n      onDragStart={() => setIsDragging(true)}\n      onDragEnd={handleDragEnd}\n      dragListener={false} // IMPORTANT: Use manual pointer down handling\n      onPointerDown={handlePointerDown} // Use our custom pointer down handler\n      initial={isNewlyAdded ? { scale: 0.8, opacity: 0 } : { scale: 1, opacity: 1 }}\n      animate={{\n        scale: isDragging ? 1.05 : 1, // Scale up slightly when dragging\n        opacity: 1,\n        boxShadow: isNewlyAdded\n          ? \"0 0 30px rgba(245, 158, 11, 0.6)\" // Enhanced shadow for new notes\n          : (isDragging ? \"0 10px 20px rgba(0,0,0,0.2)\" : \"none\"), // Shadow when dragging\n      }}\n       // Default transition for entrance/drag scale\n      transition={\n        isNewlyAdded\n          ? { type: \"spring\", stiffness: 300, damping: 20, delay: THOUGHT_ENTRANCE_DELAY / 1000 }\n          : { type: \"spring\", stiffness: 400, damping: 25 } // For hover/drag scale adjustments\n      }\n       // Apply layout props passed from parent\n      layout={layout}\n      layoutRoot={layoutRoot}\n      // Apply hover scale effect to the OUTER container\n      whileHover={!isDragging ? { scale: 1.03 } : {}} // Only apply hover scale if not dragging\n      onMouseEnter={() => !isDragging && setShowControls(true)} // Don't show controls if dragging\n      onMouseLeave={() => setShowControls(false)}\n      {...rest} // Spread remaining motion props\n    >\n      {/* Pin */}\n      <div\n        className={`${pinColor} mx-auto -mb-2 z-10 h-5 w-5 rounded-full shadow-md`}\n         // Allow drag start via the pin, handled by parent's onPointerDown\n         // style={{ touchAction: 'none' }} // Managed by handlePointerDown\n      />\n      {/* Inner Note container - Rotation, Content, Styling */}\n      <motion.div\n        className={`${thought.color} rounded-lg p-4 shadow-md overflow-hidden`} // overflow hidden might be needed\n        style={{\n          transform: `rotate(${thought.rotation}deg)`,\n          boxShadow: \"0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.08)\",\n          transformOrigin: \"center center\",\n        }}\n         // Allow drag start via note body, handled by parent's onPointerDown\n         // style={{ touchAction: 'none' }} // Managed by handlePointerDown\n      >\n        {/* Content */}\n        <div className=\"mb-3 text-gray-800 break-words whitespace-pre-wrap\">{thought.content}</div>\n\n        {/* Footer */}\n        <div className=\"flex items-center justify-between text-xs text-gray-500 mt-1\">\n          <div>{formatDistanceToNow(new Date(thought.createdAt), { addSuffix: true })}</div>\n           {/* Reply count / Toggle Replies Button */}\n          {thought.replies.length > 0 && (\n            <button\n              className=\"flex cursor-pointer items-center gap-1 rounded p-0.5 hover:text-gray-700 focus:outline-none focus:ring-1 focus:ring-amber-400 focus:ring-offset-1\"\n              onClick={(e) => {\n                e.stopPropagation() // Prevent drag start\n                setShowReplies(!showReplies)\n              }}\n              aria-label={`${thought.replies.length} ${thought.replies.length === 1 ? 'reply' : 'replies'}. ${showReplies ? \"Hide\" : \"Show\"} replies.`}\n              aria-expanded={showReplies}\n              type=\"button\"\n            >\n              <MessageSquare className=\"h-3 w-3\" />\n              <span>{thought.replies.length}</span>\n            </button>\n          )}\n        </div>\n\n        {/* Hover Controls (Delete/Reply) */}\n        <AnimatePresence>\n          {showControls && !isDragging && ( // Don't show controls when dragging\n            <motion.div\n              initial={{ opacity: 0, y: -5, scale: 0.9 }}\n              animate={{ opacity: 1, y: 0, scale: 1 }}\n              exit={{ opacity: 0, y: -5, scale: 0.9 }}\n              transition={{ duration: 0.15 }}\n              className=\"absolute -right-2 -top-2 flex gap-1 z-20\" // Ensure controls are above note\n            >\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"h-7 w-7 rounded-full bg-white/90 backdrop-blur-sm shadow-md hover:bg-red-100\"\n                onClick={(e) => { e.stopPropagation(); onDelete(); }} // Stop propagation + delete\n                aria-label=\"Delete thought\"\n                title=\"Delete thought\"\n              >\n                <Trash className=\"h-3.5 w-3.5 text-red-500\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"h-7 w-7 rounded-full bg-white/90 backdrop-blur-sm shadow-md hover:bg-blue-100\"\n                 onClick={(e) => {\n                    e.stopPropagation(); // Stop propagation\n                    const replying = !isReplying;\n                    setIsReplying(replying);\n                    // Automatically show replies when starting to reply\n                    if (replying) { setShowReplies(true); }\n                }}\n                aria-label=\"Reply to thought\"\n                title=\"Reply to thought\"\n              >\n                <MessageSquare className=\"h-3.5 w-3.5 text-blue-500\" />\n              </Button>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </motion.div> {/* End Inner Note Container */}\n\n       {/* Replies Section */}\n       <AnimatePresence>\n         {(showReplies || isReplying) && thought.replies.length > 0 && ( // Show if explicitly toggled OR if currently replying\n           <motion.div\n             initial={{ opacity: 0, height: 0, marginTop: 0 }}\n             animate={{ opacity: 1, height: \"auto\", marginTop: \"0.5rem\" }}\n             exit={{ opacity: 0, height: 0, marginTop: 0 }}\n             transition={{ duration: 0.25 }}\n             className=\"overflow-hidden\"\n             style={{ transformOrigin: \"top\" }}\n           >\n             <div className=\"ml-5 border-l-2 border-amber-200/80 pl-3 space-y-2.5\"> {/* Added space-y */}\n               {thought.replies.map((reply) => (\n                 <div key={reply.id} className=\"reply-content rounded-md bg-white/80 p-2.5 text-sm shadow-xs backdrop-blur-sm border border-gray-100\"> {/* Added class + style */}\n                   <p className=\"text-gray-700 break-words whitespace-pre-wrap\">{reply.content}</p>\n                   <div className=\"mt-1 text-xs text-gray-500/90\">\n                     {formatDistanceToNow(new Date(reply.createdAt), { addSuffix: true })}\n                   </div>\n                 </div>\n               ))}\n             </div>\n           </motion.div>\n         )}\n       </AnimatePresence>\n\n       {/* Reply Input Form */}\n       <AnimatePresence>\n         {isReplying && (\n           <motion.form\n             onSubmit={(e) => { e.stopPropagation(); handleSubmitReply(e); }} // Stop propagation\n             initial={{ opacity: 0, y: -10, marginTop: 0 }}\n             animate={{ opacity: 1, y: 0, marginTop: \"0.75rem\" }} // Adjusted margin\n             exit={{ opacity: 0, y: -10, marginTop: 0 }}\n             transition={{ duration: 0.2 }}\n             className=\"w-[calc(100%-1.25rem)] ml-auto mr-0\" // Align form width/position\n           >\n             <div className=\"group relative\">\n               <div className=\"absolute -inset-0.5 rounded-xl bg-gradient-to-r from-amber-400/70 to-amber-300/70 opacity-30 blur-sm transition duration-200 group-focus-within:opacity-70 group-hover:opacity-50\"></div>\n               <div className=\"relative flex items-center overflow-hidden rounded-xl bg-white shadow-md border border-amber-100/50\"> {/* subtle border */}\n                 <textarea\n                   ref={replyInputRef}\n                   value={replyContent}\n                   onChange={(e) => setReplyContent(e.target.value)}\n                   placeholder=\"Add reply...\" // Shorter placeholder\n                   className=\"min-h-[40px] flex-grow resize-none border-0 bg-transparent px-3 py-2 text-sm focus:outline-none\" // Adjusted padding/size\n                   onKeyDown={(e) => {\n                     // Don't propagate keyboard events that we handle\n                     if ((e.key === \"Enter\" && !e.shiftKey) || e.key === \"Escape\") {\n                        e.stopPropagation();\n                     }\n                     if (e.key === \"Enter\" && !e.shiftKey) {\n                       e.preventDefault()\n                       handleSubmitReply()\n                     } else if (e.key === \"Escape\") {\n                       setIsReplying(false)\n                       setReplyContent(\"\")\n                     }\n                   }}\n                   rows={1}\n                 />\n                 <Button\n                   type=\"submit\"\n                   disabled={!replyContent.trim()}\n                   className=\"m-1 h-8 w-8 rounded-lg bg-amber-500 hover:bg-amber-600 disabled:bg-amber-300 transition-all duration-200 flex-shrink-0\" // Added flex-shrink-0\n                   aria-label=\"Send reply\"\n                   title=\"Send reply\"\n                 >\n                   <Send className=\"h-3.5 w-3.5\" /> {/* Adjusted icon size */}\n                 </Button>\n               </div>\n             </div>\n           </motion.form>\n         )}\n       </AnimatePresence>\n    </motion.div> // End Outer Draggable Container\n  )\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 608, "column": 0}, "map": {"version":3,"sources":["file:///Users/hashashin/Documents/godmandatex0/components/canvas-board.tsx"],"sourcesContent":["// components/canvas-board.tsx\n\n\"use client\"\n\nimport type React from \"react\"\nimport { useEffect, useRef, useState } from \"react\"\nimport { Plus, MessageSquare as MessageSquareIcon, X, Loader2 } from \"lucide-react\"\nimport { AnimatePresence, motion, useSpring, useMotionValueEvent } from \"framer-motion\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Textarea } from \"@/components/ui/textarea\"\n\n// Import DraggableThought AND the types from it if needed elsewhere\nimport DraggableThought from \"./draggable-thought\"\nimport type { Thought, Reply } from \"./draggable-thought\" // Make sure types are exported from draggable-thought\n\n// Re-export types if they were defined here before\nexport type { Thought, Reply }\n\n// Animation constants\nconst THOUGHT_ENTRANCE_DELAY = 500 // ms - Delay BEFORE the note appears\nconst THOUGHT_ENTRANCE_DURATION = 300 // ms - Duration OF the note appearing animation\nconst CLUSTER_REFLOW_DURATION = 400 // ms - Duration for related notes moving to circle\n\nexport default function CanvasBoard() {\n  // --- CORE STATE ---\n  const [thoughts, setThoughts] = useState<Thought[]>([])\n  const [isAddingThought, setIsAddingThought] = useState(false)\n  const [thoughtContent, setThoughtContent] = useState(\"\")\n  const [nextZIndex, setNextZIndex] = useState(1)\n  const [boardSize] = useState({ width: 20000, height: 20000 })\n  // NEW: Loading state specific to AI interaction\n  const [isAiProcessing, setIsAiProcessing] = useState(false);\n  // Combined animation lock (covers AI call, panning, clustering)\n  const [isAnimating, setIsAnimating] = useState(false)\n\n  // --- BOARD POSITION & DRAGGING STATE ---\n  const boardRef = useRef<HTMLDivElement>(null)\n  const [isDraggingBoard, setIsDraggingBoard] = useState(false)\n  const boardPositionRef = useRef({ x: 0, y: 0 }) // Ref to track current position *during* animation\n  const dragStartPos = useRef({ x: 0, y: 0 })\n  const boardStartPos = useRef({ x: 0, y: 0 })\n\n  // Springs for smooth board movement\n  const springX = useSpring(0, { stiffness: 80, damping: 20 })\n  const springY = useSpring(0, { stiffness: 80, damping: 20 })\n\n  // State to trigger spring updates\n  const [boardPositionState, setBoardPositionState] = useState({ x: 0, y: 0 })\n\n  // Effect to update springs and ref when state changes\n  useEffect(() => {\n    springX.set(boardPositionState.x)\n    springY.set(boardPositionState.y)\n    boardPositionRef.current = boardPositionState // Keep ref in sync\n  }, [boardPositionState, springX, springY])\n\n  // --- AI CLUSTERING STATE ---\n  // Target position for the board pan (Phase 1)\n  const [panTarget, setPanTarget] = useState<{ x: number; y: number } | null>(null)\n  // Ref to hold data needed for clustering (Phase 2)\n  const clusterRef = useRef<{\n    origin: { x: number; y: number }\n    relevantIds: string[]\n    newThoughtData: Omit<Thought, 'position' | 'zIndex' | 'rotation' | 'isNewlyAdded'> // Store new note details\n  } | null>(null)\n\n  const defaultColor = \"bg-[#FEF9C3]\" // Keep consistent color\n\n  // --- INITIALIZATION ---\n  useEffect(() => {\n    // Sample thoughts (same as your original)\n    const sampleThoughts: Thought[] = [\n       {\n        id: \"1\",\n        content: \"The best ideas come when you least expect them.\",\n        color: defaultColor,\n        position: { x: 9800, y: 9750 }, rotation: -2, zIndex: 1, createdAt: new Date(), replies: [ { id: \"r1\", content: \"So true! I had my best idea in the shower.\", createdAt: new Date(), }, ],\n      },\n      {\n        id: \"2\",\n        content: \"Simplicity is the ultimate sophistication.\",\n        color: defaultColor,\n        position: { x: 10100, y: 9900 }, rotation: 1, zIndex: 2, createdAt: new Date(), replies: [],\n      },\n      {\n        id: \"3\",\n        content: \"Design is not just what it looks like and feels like. Design is how it works.\",\n        color: defaultColor,\n        position: { x: 9900, y: 10050 }, rotation: -1, zIndex: 3, createdAt: new Date(), replies: [],\n      },\n    ]\n    setThoughts(sampleThoughts)\n    setNextZIndex(4)\n    // Center board initially\n    const centerX = -boardSize.width / 2 + window.innerWidth / 2\n    const centerY = -boardSize.height / 2 + window.innerHeight / 2\n    setBoardPositionState({ x: centerX, y: centerY })\n    // Initialize springs directly too to avoid initial jump\n    springX.set(centerX, false)\n    springY.set(centerY, false)\n    boardPositionRef.current = { x: centerX, y: centerY };\n  }, [boardSize.width, boardSize.height, defaultColor, springX, springY]) // Add springs to dependency array\n\n\n  // --- BOARD DRAGGING HANDLERS (Your Original Logic) ---\n  const handleBoardMouseDown = (e: React.MouseEvent) => {\n    // Prevent dragging if AI processing, animating, adding, or not clicking background\n    if (\n      isAnimating ||\n      isAiProcessing ||\n      isAddingThought ||\n      !(e.target as HTMLElement).classList.contains(\"board-background\")\n    ) {\n      return;\n    }\n    // Prevent drag if clicking on a thought itself (handled by DraggableThought)\n    if ((e.target as HTMLElement).closest('.thought-draggable-outer')) {\n        return;\n    }\n\n\n    setIsDraggingBoard(true);\n    dragStartPos.current = { x: e.clientX, y: e.clientY };\n    // Use the ref for the most up-to-date position during potential spring animations\n    boardStartPos.current = boardPositionRef.current;\n    document.addEventListener(\"mousemove\", handleBoardMouseMove);\n    document.addEventListener(\"mouseup\", handleBoardMouseUp);\n    document.body.style.cursor = \"grabbing\";\n    e.preventDefault();\n  };\n\n  const handleBoardMouseMove = (e: MouseEvent) => {\n    if (!isDraggingBoard) return;\n    const dx = e.clientX - dragStartPos.current.x;\n    const dy = e.clientY - dragStartPos.current.y;\n    // Update the state, which will then update the springs via useEffect\n    setBoardPositionState({\n      x: boardStartPos.current.x + dx,\n      y: boardStartPos.current.y + dy,\n    });\n  };\n\n  const handleBoardMouseUp = () => {\n    if (isDraggingBoard) {\n      setIsDraggingBoard(false);\n      document.removeEventListener(\"mousemove\", handleBoardMouseMove);\n      document.removeEventListener(\"mouseup\", handleBoardMouseUp);\n      document.body.style.cursor = \"default\";\n    }\n  };\n\n  // --- AI CLUSTER COMPLETION CHECK (Phase 2 Trigger) ---\n  // Listen for spring changes to check if the pan has settled\n  useMotionValueEvent(springX, \"change\", (latestX) => {\n      // Check if panTarget exists before calling tryCluster\n      if (panTarget) {\n          tryCluster(latestX, springY.get());\n      }\n  });\n  useMotionValueEvent(springY, \"change\", (latestY) => {\n      // Check if panTarget exists before calling tryCluster\n      if (panTarget) {\n          tryCluster(springX.get(), latestY);\n      }\n  });\n\n  // Function to execute Phase 2 (clustering) when pan finishes\n  function tryCluster(currentX: number, currentY: number) {\n    // Only proceed if we have a target, cluster data, and are close enough\n    if (!panTarget || !clusterRef.current) return\n    const { x: targetX, y: targetY } = panTarget\n\n    // Check if the current spring values are very close to the target\n    if (Math.abs(currentX - targetX) < 1 && Math.abs(currentY - targetY) < 1) {\n\n      // Prevent multiple triggers if already processing cluster\n      if (!clusterRef.current) return;\n\n      const { origin, relevantIds, newThoughtData } = clusterRef.current\n      const clusterRadius = relevantIds.length > 1 ? 280 : 0 // Radius for the circle, adjust as needed (0 if only 1 related note)\n      const numRelevant = relevantIds.length\n      let zIndexCounter = nextZIndex; // Use a local counter for this batch\n\n      // Create the new thought object first\n      const newThought: Thought = {\n        ...newThoughtData,\n        position: { ...origin }, // Place at the exact center\n        rotation: Math.random() * 6 - 3,\n        zIndex: zIndexCounter++, // Highest z-index initially\n        createdAt: new Date(),\n        isNewlyAdded: true, // Mark for entrance animation\n      };\n\n      setThoughts((prevThoughts) => {\n          const updatedThoughts = prevThoughts.map((t) => {\n            // Update position and zIndex for relevant thoughts\n            if (relevantIds.includes(t.id)) {\n              const i = relevantIds.indexOf(t.id);\n              // Calculate angle for circular layout\n              // Offset angle slightly so first item isn't straight up if desired (e.g. -Math.PI / 2)\n              const angle = (2 * Math.PI * i) / numRelevant - (Math.PI / 2) ;\n              return {\n                ...t,\n                position: {\n                  x: origin.x + Math.cos(angle) * clusterRadius,\n                  y: origin.y + Math.sin(angle) * clusterRadius,\n                },\n                zIndex: zIndexCounter++, // Assign increasing z-index\n                // Explicitly ensure isNewlyAdded is false for these repositioned notes\n                isNewlyAdded: false,\n              };\n            }\n            // Keep other thoughts as they are, ensure isNewlyAdded is false\n            return { ...t, isNewlyAdded: false };\n          });\n          // Add the new thought to the array\n          return [...updatedThoughts, newThought];\n      });\n\n      setNextZIndex(zIndexCounter); // Update the global zIndex counter\n\n      // --- Cleanup ---\n      // Clear the target and ref now that clustering is done\n      setPanTarget(null);\n      clusterRef.current = null;\n\n      // Schedule cleanup for the new thought's 'isNewlyAdded' flag and isAnimating state\n      const cleanupTimeout = THOUGHT_ENTRANCE_DELAY + Math.max(THOUGHT_ENTRANCE_DURATION, CLUSTER_REFLOW_DURATION);\n      setTimeout(() => {\n        setThoughts((currentThoughts) =>\n          currentThoughts.map((t) =>\n            t.id === newThought.id ? { ...t, isNewlyAdded: false } : t\n          )\n        );\n        setIsAnimating(false); // Release the animation lock\n        console.log(\"Clustering and animation finished.\");\n      }, cleanupTimeout);\n    }\n  }\n\n\n  // --- ADD THOUGHT HANDLER (AI-Powered Version) ---\n  const addThought = async (e?: React.FormEvent) => {\n    e?.preventDefault();\n    if (!thoughtContent.trim() || isAnimating || isAiProcessing) return;\n\n    setIsAnimating(true); // Lock interactions during the whole process\n    setIsAiProcessing(true); // Show loading indicator\n    setIsAddingThought(false); // Close the input form immediately\n\n    const currentThoughtContent = thoughtContent; // Capture content before clearing\n    setThoughtContent(\"\"); // Clear input now\n\n    try {\n      // 1) Get relevant thought IDs from our API\n      console.log(\"Calling /api/rankRelevant for:\", currentThoughtContent);\n      const briefThoughts = thoughts.map((t) => ({ id: t.id, content: t.content }));\n      const response = await fetch(\"/api/rankRelevant\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ newThought: currentThoughtContent, existing: briefThoughts }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ error: \"Failed to parse error response\" }));\n        throw new Error(`API Error (${response.status}): ${errorData?.error || response.statusText}`);\n      }\n\n      const { relevantIds } = await response.json() as { relevantIds: string[] };\n      console.log(\"Received relevant IDs:\", relevantIds);\n      setIsAiProcessing(false); // Hide loading indicator\n\n      // 2) Compute centroid of the relevant thoughts\n      const relevantThoughts = thoughts.filter((t) => relevantIds.includes(t.id));\n      let centroidX: number;\n      let centroidY: number;\n\n      if (relevantThoughts.length > 0) {\n        let sumX = 0;\n        let sumY = 0;\n        relevantThoughts.forEach((t) => {\n          sumX += t.position.x;\n          sumY += t.position.y;\n        });\n        centroidX = sumX / relevantThoughts.length;\n        centroidY = sumY / relevantThoughts.length;\n      } else {\n        // Fallback: Find a place near the current viewport center if no relevant notes\n        // Or use the old findNewPosition logic (simpler here: place near viewport center)\n        const viewportCenterX = -boardPositionRef.current.x + window.innerWidth / 2;\n        const viewportCenterY = -boardPositionRef.current.y + window.innerHeight / 2;\n        centroidX = viewportCenterX + (Math.random() * 200 - 100); // Add slight randomness\n        centroidY = viewportCenterY + (Math.random() * 200 - 100);\n        console.log(\"No relevant thoughts found, placing near viewport center:\", {centroidX, centroidY})\n      }\n\n      // 3) Calculate target board position to center the centroid\n      const viewportWidth = window.innerWidth;\n      const viewportHeight = window.innerHeight;\n      const targetBoardX = -centroidX + viewportWidth / 2;\n      const targetBoardY = -centroidY + viewportHeight / 2;\n\n      // 4) Store data needed for Phase 2 (clustering)\n      const newThoughtId = Math.random().toString(36).substring(2, 9);\n      clusterRef.current = {\n        origin: { x: centroidX, y: centroidY },\n        relevantIds,\n        newThoughtData: { // Store everything except position/zIndex etc.\n            id: newThoughtId,\n            content: currentThoughtContent,\n            color: defaultColor,\n            createdAt: new Date(), // Will be slightly off from actual creation, but close enough\n            replies: [],\n        }\n      };\n\n      // 5) Set the pan target and trigger the board animation (Phase 1)\n      setPanTarget({ x: targetBoardX, y: targetBoardY });\n      console.log(\"Panning board to:\", { targetBoardX, targetBoardY });\n      // Update state to trigger useEffect -> spring.set\n      setBoardPositionState({ x: targetBoardX, y: targetBoardY });\n      // Also set springs directly for potentially faster response, with adjusted stiffness/damping for pan\n      springX.set(targetBoardX, { type: \"spring\", stiffness: 60, damping: 18 });\n      springY.set(targetBoardY, { type: \"spring\", stiffness: 60, damping: 18 });\n\n      // Note: isAnimating remains true until tryCluster finishes and runs its timeout\n\n    } catch (error) {\n      console.error(\"Failed to add thought:\", error);\n      setIsAiProcessing(false);\n      setIsAnimating(false); // Unlock on error\n      // Optionally: Show an error message to the user\n      // Restore input content if desired?\n      // setThoughtContent(currentThoughtContent);\n      setIsAddingThought(true); // Re-open the form on error maybe?\n    }\n  };\n\n\n  // --- OTHER HANDLERS (Your Original Logic) ---\n\n  // Update thought position after dragging\n  const updateThoughtPosition = (id: string, position: { x: number; y: number }) => {\n    // Prevent updates during the AI clustering animation phase\n    if (isAnimating && clusterRef.current) return;\n\n    setThoughts((prev) =>\n      prev.map((thought) =>\n        thought.id === id ? { ...thought, position, zIndex: nextZIndex } : thought\n      ),\n    )\n    setNextZIndex((prev) => prev + 1)\n  }\n\n  // Delete a thought\n  const deleteThought = (id: string) => {\n     // Prevent updates during the AI clustering animation phase\n    if (isAnimating && clusterRef.current) return;\n    setThoughts((prev) => prev.filter((thought) => thought.id !== id))\n  }\n\n  // Add a reply to a thought\n  const addReply = (thoughtId: string, content: string) => {\n     // Prevent updates during the AI clustering animation phase\n    if (isAnimating && clusterRef.current) return;\n\n    const newReply: Reply = {\n      id: Math.random().toString(36).substring(2, 9),\n      content,\n      createdAt: new Date(),\n    }\n    setThoughts((prev) =>\n      prev.map((thought) =>\n        thought.id === thoughtId\n          ? { ...thought, replies: [...thought.replies, newReply], zIndex: nextZIndex }\n          : thought,\n      ),\n    )\n    setNextZIndex((prev) => prev + 1)\n  }\n\n  // --- RENDER ---\n  return (\n    // Add pointer cursor styles based on dragging state\n    <div\n        className={`relative h-screen w-screen overflow-hidden bg-stone-100 ${\n            isDraggingBoard ? 'cursor-grabbing' : 'cursor-grab' // Change cursor for board drag\n        }`}\n        onMouseDown={handleBoardMouseDown} // Attach mouse down here\n        // Prevent browser drag behavior\n        onDragStart={(e) => e.preventDefault()}\n    >\n      {/* The movable board area */}\n      <motion.div\n        ref={boardRef}\n        className=\"absolute\"\n        style={{\n          width: boardSize.width,\n          height: boardSize.height,\n           // Use the springs for smooth movement\n          x: springX,\n          y: springY,\n          // Your background pattern\n          backgroundImage: `url(\"data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23784c2c' fillOpacity='0.1' fillRule='evenodd'%3E%3Ccircle cx='10' cy='10' r='2'/%3E%3Ccircle cx='30' cy='10' r='2'/%3E%3Ccircle cx='50' cy='10' r='2'/%3E%3Ccircle cx='70' cy='10' r='2'/%3E%3Ccircle cx='90' cy='10' r='2'/%3E%3Ccircle cx='10' cy='30' r='2'/%3E%3Ccircle cx='30' cy='30' r='2'/%3E%3Ccircle cx='50' cy='30' r='2'/%3E%3Ccircle cx='70' cy='30' r='2'/%3E%3Ccircle cx='90' cy='30' r='2'/%3E%3Ccircle cx='10' cy='50' r='2'/%3E%3Ccircle cx='30' cy='50' r='2'/%3E%3Ccircle cx='50' cy='50' r='2'/%3E%3Ccircle cx='70' cy='50' r='2'/%3E%3Ccircle cx='90' cy='50' r='2'/%3E%3Ccircle cx='10' cy='70' r='2'/%3E%3Ccircle cx='30' cy='70' r='2'/%3E%3Ccircle cx='50' cy='70' r='2'/%3E%3Ccircle cx='70' cy='70' r='2'/%3E%3Ccircle cx='90' cy='70' r='2'/%3E%3Ccircle cx='10' cy='90' r='2'/%3E%3Ccircle cx='30' cy='90' r='2'/%3E%3Ccircle cx='50' cy='90' r='2'/%3E%3Ccircle cx='70' cy='90' r='2'/%3E%3Ccircle cx='90' cy='90' r='2'/%3E%3C/g%3E%3C/svg%3E\")`,\n          backgroundSize: \"50px 50px\",\n          backgroundPosition: \"center\",\n          // Ensure clicks pass through to the background div if needed, but background itself is draggable\n          pointerEvents: 'auto',\n        }}\n      >\n        {/* This div captures clicks intended ONLY for the board background */}\n        {/* Make it slightly smaller than the motion div if edge dragging causes issues */}\n        <div\n            className=\"board-background absolute h-full w-full pointer-events-auto\"\n            // Add inline style to ensure it covers the area if needed, but should inherit\n            style={{ cursor: isDraggingBoard ? 'grabbing' : 'grab' }}\n        >\n          {/* Render all the thoughts */}\n          {/* Use layout prop for smoother transitions when positions change */}\n          <AnimatePresence>\n            {thoughts.map((thought) => (\n              <DraggableThought\n                key={thought.id} // Key is crucial for AnimatePresence and updates\n                thought={thought}\n                isNewlyAdded={!!thought.isNewlyAdded} // Ensure boolean\n                onPositionChange={updateThoughtPosition}\n                onDelete={deleteThought}\n                onAddReply={addReply}\n                // Pass animation duration for consistency if needed inside DraggableThought\n                 layout // Enable automatic layout animation for position changes\n                 layoutRoot // Treat each thought as a layout root for performance\n                 // Define transition specifically for layout changes (clustering)\n                 transition={{ type: 'spring', duration: CLUSTER_REFLOW_DURATION / 1000, bounce: 0.2 }}\n              />\n            ))}\n          </AnimatePresence>\n        </div>\n      </motion.div>\n\n      {/* Bottom-centered Add Thought Button/Form (Your Original Structure) */}\n      <div className=\"fixed bottom-6 left-1/2 z-50 -translate-x-1/2\">\n          <AnimatePresence mode=\"wait\">\n          {!isAddingThought ? (\n            // Button to open the add form\n            <motion.div\n              key=\"add-button\"\n              initial={{ y: 20, opacity: 0 }}\n              animate={{ y: 0, opacity: 1 }}\n              exit={{ y: 20, opacity: 0 }}\n              transition={{ duration: 0.2 }}\n            >\n              <Button\n                onClick={() => !isAnimating && setIsAddingThought(true)} // Prevent opening if animating\n                className=\"flex h-14 w-14 items-center justify-center rounded-full bg-black/80 backdrop-blur-sm p-0 shadow-xl hover:bg-black transition-all hover:scale-105 border border-white/10\"\n                disabled={isAnimating || isAiProcessing} // Disable during whole process\n                aria-label=\"Add new thought\"\n              >\n                {/* Show loader when AI is processing */}\n                {isAiProcessing ? (\n                    <Loader2 className=\"h-6 w-6 animate-spin\" />\n                ) : (\n                    <Plus className=\"h-6 w-6\" />\n                )}\n              </Button>\n            </motion.div>\n          ) : (\n            // The form to add a new thought\n            <motion.div\n              key=\"add-form\"\n              initial={{ y: 20, opacity: 0, scale: 0.95 }}\n              animate={{ y: 0, opacity: 1, scale: 1 }}\n              exit={{ y: 20, opacity: 0, scale: 0.95 }}\n              transition={{ type: \"spring\", stiffness: 500, damping: 30 }}\n              className=\"relative\" // Keep relative for glow\n            >\n              {/* Glow effect for the form */}\n              <div className=\"absolute -inset-0.5 rounded-full bg-gradient-to-r from-amber-400/30 to-yellow-300/30 opacity-70 blur-sm\"></div>\n              {/* Form element */}\n              <form onSubmit={addThought} className=\"relative flex w-[500px] max-w-[90vw] items-center overflow-hidden rounded-full bg-white/90 backdrop-blur-md shadow-xl border border-amber-100\">\n                <div className=\"flex items-center pl-5 text-amber-500\">\n                  <MessageSquareIcon className=\"h-5 w-5\" />\n                </div>\n                <Textarea\n                  value={thoughtContent}\n                  onChange={(e) => setThoughtContent(e.target.value)}\n                  placeholder=\"What's on your mind? Press Enter to add...\"\n                  className=\"min-h-[54px] flex-1 resize-none border-0 bg-transparent px-4 py-4 text-base focus-visible:ring-0 focus-visible:ring-offset-0\"\n                  autoFocus\n                  onKeyDown={(e) => {\n                    if (e.key === \"Enter\" && !e.shiftKey) {\n                      e.preventDefault()\n                      addThought() // Call the updated addThought\n                    } else if (e.key === \"Escape\") {\n                      setIsAddingThought(false)\n                      setThoughtContent(\"\") // Clear content on escape\n                    }\n                  }}\n                  rows={1}\n                  disabled={isAiProcessing || isAnimating} // Disable input during processing\n                />\n                {/* Clear button */}\n                {thoughtContent && !isAiProcessing && ( // Hide clear button when processing\n                  <Button\n                    type=\"button\"\n                    onClick={() => { setThoughtContent(\"\") }}\n                    variant=\"ghost\" size=\"icon\"\n                    className=\"mx-1 h-8 w-8 rounded-full hover:bg-gray-100\"\n                  >\n                    <X className=\"h-4 w-4 text-gray-500\" />\n                    <span className=\"sr-only\">Clear</span>\n                  </Button>\n                )}\n                {/* Submit button */}\n                <Button\n                  type=\"submit\"\n                  className=\"m-1.5 h-11 w-11 rounded-full bg-amber-500 p-0 hover:bg-amber-600 transition-all hover:scale-105 shadow-sm\"\n                  disabled={!thoughtContent.trim() || isAnimating || isAiProcessing}\n                  aria-label=\"Submit new thought\"\n                >\n                  {/* Show loader inside submit button as well */}\n                  {isAiProcessing ? (\n                     <Loader2 className=\"h-5 w-5 animate-spin\" />\n                  ) :(\n                    <Plus className=\"h-5 w-5\" />\n                  )}\n\n                  <span className=\"sr-only\">Add thought</span>\n                </Button>\n              </form>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"AAAA,8BAA8B;;;;;AAK9B;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA,oEAAoE;AACpE;AAXA;;;;;;;;AAiBA,sBAAsB;AACtB,MAAM,yBAAyB,IAAI,qCAAqC;;AACxE,MAAM,4BAA4B,IAAI,gDAAgD;;AACtF,MAAM,0BAA0B,IAAI,mDAAmD;;AAExE,SAAS;IACtB,qBAAqB;IACrB,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAa,EAAE;IACtD,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACvD,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACrD,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC7C,MAAM,CAAC,UAAU,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;QAAE,OAAO;QAAO,QAAQ;IAAM;IAC3D,gDAAgD;IAChD,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACrD,gEAAgE;IAChE,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAE/C,0CAA0C;IAC1C,MAAM,WAAW,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAkB;IACxC,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACvD,MAAM,mBAAmB,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAE;QAAE,GAAG;QAAG,GAAG;IAAE,GAAG,mDAAmD;;IACnG,MAAM,eAAe,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAE;QAAE,GAAG;QAAG,GAAG;IAAE;IACzC,MAAM,gBAAgB,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAE;QAAE,GAAG;QAAG,GAAG;IAAE;IAE1C,oCAAoC;IACpC,MAAM,UAAU,CAAA,GAAA,yKAAA,CAAA,YAAS,AAAD,EAAE,GAAG;QAAE,WAAW;QAAI,SAAS;IAAG;IAC1D,MAAM,UAAU,CAAA,GAAA,yKAAA,CAAA,YAAS,AAAD,EAAE,GAAG;QAAE,WAAW;QAAI,SAAS;IAAG;IAE1D,kCAAkC;IAClC,MAAM,CAAC,oBAAoB,sBAAsB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;QAAE,GAAG;QAAG,GAAG;IAAE;IAE1E,sDAAsD;IACtD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,QAAQ,GAAG,CAAC,mBAAmB,CAAC;QAChC,QAAQ,GAAG,CAAC,mBAAmB,CAAC;QAChC,iBAAiB,OAAO,GAAG,mBAAmB,mBAAmB;;IACnE,GAAG;QAAC;QAAoB;QAAS;KAAQ;IAEzC,8BAA8B;IAC9B,8CAA8C;IAC9C,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAmC;IAC5E,mDAAmD;IACnD,MAAM,aAAa,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAId;IAEV,MAAM,eAAe,eAAe,wBAAwB;;IAE5D,yBAAyB;IACzB,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,0CAA0C;QAC1C,MAAM,iBAA4B;YAC/B;gBACC,IAAI;gBACJ,SAAS;gBACT,OAAO;gBACP,UAAU;oBAAE,GAAG;oBAAM,GAAG;gBAAK;gBAAG,UAAU,CAAC;gBAAG,QAAQ;gBAAG,WAAW,IAAI;gBAAQ,SAAS;oBAAE;wBAAE,IAAI;wBAAM,SAAS;wBAA8C,WAAW,IAAI;oBAAQ;iBAAI;YAC3L;YACA;gBACE,IAAI;gBACJ,SAAS;gBACT,OAAO;gBACP,UAAU;oBAAE,GAAG;oBAAO,GAAG;gBAAK;gBAAG,UAAU;gBAAG,QAAQ;gBAAG,WAAW,IAAI;gBAAQ,SAAS,EAAE;YAC7F;YACA;gBACE,IAAI;gBACJ,SAAS;gBACT,OAAO;gBACP,UAAU;oBAAE,GAAG;oBAAM,GAAG;gBAAM;gBAAG,UAAU,CAAC;gBAAG,QAAQ;gBAAG,WAAW,IAAI;gBAAQ,SAAS,EAAE;YAC9F;SACD;QACD,YAAY;QACZ,cAAc;QACd,yBAAyB;QACzB,MAAM,UAAU,CAAC,UAAU,KAAK,GAAG,IAAI,OAAO,UAAU,GAAG;QAC3D,MAAM,UAAU,CAAC,UAAU,MAAM,GAAG,IAAI,OAAO,WAAW,GAAG;QAC7D,sBAAsB;YAAE,GAAG;YAAS,GAAG;QAAQ;QAC/C,wDAAwD;QACxD,QAAQ,GAAG,CAAC,SAAS;QACrB,QAAQ,GAAG,CAAC,SAAS;QACrB,iBAAiB,OAAO,GAAG;YAAE,GAAG;YAAS,GAAG;QAAQ;IACtD,GAAG;QAAC,UAAU,KAAK;QAAE,UAAU,MAAM;QAAE;QAAc;QAAS;KAAQ,EAAE,kCAAkC;;IAG1G,wDAAwD;IACxD,MAAM,uBAAuB,CAAC;QAC5B,mFAAmF;QACnF,IACE,eACA,kBACA,mBACA,CAAC,AAAC,EAAE,MAAM,CAAiB,SAAS,CAAC,QAAQ,CAAC,qBAC9C;YACA;QACF;QACA,6EAA6E;QAC7E,IAAI,AAAC,EAAE,MAAM,CAAiB,OAAO,CAAC,6BAA6B;YAC/D;QACJ;QAGA,mBAAmB;QACnB,aAAa,OAAO,GAAG;YAAE,GAAG,EAAE,OAAO;YAAE,GAAG,EAAE,OAAO;QAAC;QACpD,kFAAkF;QAClF,cAAc,OAAO,GAAG,iBAAiB,OAAO;QAChD,SAAS,gBAAgB,CAAC,aAAa;QACvC,SAAS,gBAAgB,CAAC,WAAW;QACrC,SAAS,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG;QAC7B,EAAE,cAAc;IAClB;IAEA,MAAM,uBAAuB,CAAC;QAC5B,IAAI,CAAC,iBAAiB;QACtB,MAAM,KAAK,EAAE,OAAO,GAAG,aAAa,OAAO,CAAC,CAAC;QAC7C,MAAM,KAAK,EAAE,OAAO,GAAG,aAAa,OAAO,CAAC,CAAC;QAC7C,qEAAqE;QACrE,sBAAsB;YACpB,GAAG,cAAc,OAAO,CAAC,CAAC,GAAG;YAC7B,GAAG,cAAc,OAAO,CAAC,CAAC,GAAG;QAC/B;IACF;IAEA,MAAM,qBAAqB;QACzB,IAAI,iBAAiB;YACnB,mBAAmB;YACnB,SAAS,mBAAmB,CAAC,aAAa;YAC1C,SAAS,mBAAmB,CAAC,WAAW;YACxC,SAAS,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG;QAC/B;IACF;IAEA,wDAAwD;IACxD,4DAA4D;IAC5D,CAAA,GAAA,2LAAA,CAAA,sBAAmB,AAAD,EAAE,SAAS,UAAU,CAAC;QACpC,sDAAsD;QACtD,IAAI,WAAW;YACX,WAAW,SAAS,QAAQ,GAAG;QACnC;IACJ;IACA,CAAA,GAAA,2LAAA,CAAA,sBAAmB,AAAD,EAAE,SAAS,UAAU,CAAC;QACpC,sDAAsD;QACtD,IAAI,WAAW;YACX,WAAW,QAAQ,GAAG,IAAI;QAC9B;IACJ;IAEA,6DAA6D;IAC7D,SAAS,WAAW,QAAgB,EAAE,QAAgB;QACpD,uEAAuE;QACvE,IAAI,CAAC,aAAa,CAAC,WAAW,OAAO,EAAE;QACvC,MAAM,EAAE,GAAG,OAAO,EAAE,GAAG,OAAO,EAAE,GAAG;QAEnC,kEAAkE;QAClE,IAAI,KAAK,GAAG,CAAC,WAAW,WAAW,KAAK,KAAK,GAAG,CAAC,WAAW,WAAW,GAAG;YAExE,0DAA0D;YAC1D,IAAI,CAAC,WAAW,OAAO,EAAE;YAEzB,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,cAAc,EAAE,GAAG,WAAW,OAAO;YAClE,MAAM,gBAAgB,YAAY,MAAM,GAAG,IAAI,MAAM,EAAE,qEAAqE;;YAC5H,MAAM,cAAc,YAAY,MAAM;YACtC,IAAI,gBAAgB,YAAY,qCAAqC;YAErE,sCAAsC;YACtC,MAAM,aAAsB;gBAC1B,GAAG,cAAc;gBACjB,UAAU;oBAAE,GAAG,MAAM;gBAAC;gBACtB,UAAU,KAAK,MAAM,KAAK,IAAI;gBAC9B,QAAQ;gBACR,WAAW,IAAI;gBACf,cAAc;YAChB;YAEA,YAAY,CAAC;gBACT,MAAM,kBAAkB,aAAa,GAAG,CAAC,CAAC;oBACxC,mDAAmD;oBACnD,IAAI,YAAY,QAAQ,CAAC,EAAE,EAAE,GAAG;wBAC9B,MAAM,IAAI,YAAY,OAAO,CAAC,EAAE,EAAE;wBAClC,sCAAsC;wBACtC,uFAAuF;wBACvF,MAAM,QAAQ,AAAC,IAAI,KAAK,EAAE,GAAG,IAAK,cAAe,KAAK,EAAE,GAAG;wBAC3D,OAAO;4BACL,GAAG,CAAC;4BACJ,UAAU;gCACR,GAAG,OAAO,CAAC,GAAG,KAAK,GAAG,CAAC,SAAS;gCAChC,GAAG,OAAO,CAAC,GAAG,KAAK,GAAG,CAAC,SAAS;4BAClC;4BACA,QAAQ;4BACR,uEAAuE;4BACvE,cAAc;wBAChB;oBACF;oBACA,gEAAgE;oBAChE,OAAO;wBAAE,GAAG,CAAC;wBAAE,cAAc;oBAAM;gBACrC;gBACA,mCAAmC;gBACnC,OAAO;uBAAI;oBAAiB;iBAAW;YAC3C;YAEA,cAAc,gBAAgB,mCAAmC;YAEjE,kBAAkB;YAClB,uDAAuD;YACvD,aAAa;YACb,WAAW,OAAO,GAAG;YAErB,mFAAmF;YACnF,MAAM,iBAAiB,yBAAyB,KAAK,GAAG,CAAC,2BAA2B;YACpF,WAAW;gBACT,YAAY,CAAC,kBACX,gBAAgB,GAAG,CAAC,CAAC,IACnB,EAAE,EAAE,KAAK,WAAW,EAAE,GAAG;4BAAE,GAAG,CAAC;4BAAE,cAAc;wBAAM,IAAI;gBAG7D,eAAe,QAAQ,6BAA6B;gBACpD,QAAQ,GAAG,CAAC;YACd,GAAG;QACL;IACF;IAGA,mDAAmD;IACnD,MAAM,aAAa,OAAO;QACxB,GAAG;QACH,IAAI,CAAC,eAAe,IAAI,MAAM,eAAe,gBAAgB;QAE7D,eAAe,OAAO,6CAA6C;QACnE,kBAAkB,OAAO,yBAAyB;QAClD,mBAAmB,QAAQ,mCAAmC;QAE9D,MAAM,wBAAwB,gBAAgB,kCAAkC;QAChF,kBAAkB,KAAK,kBAAkB;QAEzC,IAAI;YACF,2CAA2C;YAC3C,QAAQ,GAAG,CAAC,kCAAkC;YAC9C,MAAM,gBAAgB,SAAS,GAAG,CAAC,CAAC,IAAM,CAAC;oBAAE,IAAI,EAAE,EAAE;oBAAE,SAAS,EAAE,OAAO;gBAAC,CAAC;YAC3E,MAAM,WAAW,MAAM,MAAM,qBAAqB;gBAChD,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;gBAC9C,MAAM,KAAK,SAAS,CAAC;oBAAE,YAAY;oBAAuB,UAAU;gBAAc;YACpF;YAEA,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,MAAM,YAAY,MAAM,SAAS,IAAI,GAAG,KAAK,CAAC,IAAM,CAAC;wBAAE,OAAO;oBAAiC,CAAC;gBAChG,MAAM,IAAI,MAAM,CAAC,WAAW,EAAE,SAAS,MAAM,CAAC,GAAG,EAAE,WAAW,SAAS,SAAS,UAAU,EAAE;YAC9F;YAEA,MAAM,EAAE,WAAW,EAAE,GAAG,MAAM,SAAS,IAAI;YAC3C,QAAQ,GAAG,CAAC,0BAA0B;YACtC,kBAAkB,QAAQ,yBAAyB;YAEnD,+CAA+C;YAC/C,MAAM,mBAAmB,SAAS,MAAM,CAAC,CAAC,IAAM,YAAY,QAAQ,CAAC,EAAE,EAAE;YACzE,IAAI;YACJ,IAAI;YAEJ,IAAI,iBAAiB,MAAM,GAAG,GAAG;gBAC/B,IAAI,OAAO;gBACX,IAAI,OAAO;gBACX,iBAAiB,OAAO,CAAC,CAAC;oBACxB,QAAQ,EAAE,QAAQ,CAAC,CAAC;oBACpB,QAAQ,EAAE,QAAQ,CAAC,CAAC;gBACtB;gBACA,YAAY,OAAO,iBAAiB,MAAM;gBAC1C,YAAY,OAAO,iBAAiB,MAAM;YAC5C,OAAO;gBACL,+EAA+E;gBAC/E,kFAAkF;gBAClF,MAAM,kBAAkB,CAAC,iBAAiB,OAAO,CAAC,CAAC,GAAG,OAAO,UAAU,GAAG;gBAC1E,MAAM,kBAAkB,CAAC,iBAAiB,OAAO,CAAC,CAAC,GAAG,OAAO,WAAW,GAAG;gBAC3E,YAAY,kBAAkB,CAAC,KAAK,MAAM,KAAK,MAAM,GAAG,GAAG,wBAAwB;gBACnF,YAAY,kBAAkB,CAAC,KAAK,MAAM,KAAK,MAAM,GAAG;gBACxD,QAAQ,GAAG,CAAC,6DAA6D;oBAAC;oBAAW;gBAAS;YAChG;YAEA,4DAA4D;YAC5D,MAAM,gBAAgB,OAAO,UAAU;YACvC,MAAM,iBAAiB,OAAO,WAAW;YACzC,MAAM,eAAe,CAAC,YAAY,gBAAgB;YAClD,MAAM,eAAe,CAAC,YAAY,iBAAiB;YAEnD,gDAAgD;YAChD,MAAM,eAAe,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,SAAS,CAAC,GAAG;YAC7D,WAAW,OAAO,GAAG;gBACnB,QAAQ;oBAAE,GAAG;oBAAW,GAAG;gBAAU;gBACrC;gBACA,gBAAgB;oBACZ,IAAI;oBACJ,SAAS;oBACT,OAAO;oBACP,WAAW,IAAI;oBACf,SAAS,EAAE;gBACf;YACF;YAEA,kEAAkE;YAClE,aAAa;gBAAE,GAAG;gBAAc,GAAG;YAAa;YAChD,QAAQ,GAAG,CAAC,qBAAqB;gBAAE;gBAAc;YAAa;YAC9D,kDAAkD;YAClD,sBAAsB;gBAAE,GAAG;gBAAc,GAAG;YAAa;YACzD,qGAAqG;YACrG,QAAQ,GAAG,CAAC,cAAc;gBAAE,MAAM;gBAAU,WAAW;gBAAI,SAAS;YAAG;YACvE,QAAQ,GAAG,CAAC,cAAc;gBAAE,MAAM;gBAAU,WAAW;gBAAI,SAAS;YAAG;QAEvE,gFAAgF;QAElF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,0BAA0B;YACxC,kBAAkB;YAClB,eAAe,QAAQ,kBAAkB;YACzC,gDAAgD;YAChD,oCAAoC;YACpC,4CAA4C;YAC5C,mBAAmB,OAAO,mCAAmC;QAC/D;IACF;IAGA,+CAA+C;IAE/C,yCAAyC;IACzC,MAAM,wBAAwB,CAAC,IAAY;QACzC,2DAA2D;QAC3D,IAAI,eAAe,WAAW,OAAO,EAAE;QAEvC,YAAY,CAAC,OACX,KAAK,GAAG,CAAC,CAAC,UACR,QAAQ,EAAE,KAAK,KAAK;oBAAE,GAAG,OAAO;oBAAE;oBAAU,QAAQ;gBAAW,IAAI;QAGvE,cAAc,CAAC,OAAS,OAAO;IACjC;IAEA,mBAAmB;IACnB,MAAM,gBAAgB,CAAC;QACpB,2DAA2D;QAC5D,IAAI,eAAe,WAAW,OAAO,EAAE;QACvC,YAAY,CAAC,OAAS,KAAK,MAAM,CAAC,CAAC,UAAY,QAAQ,EAAE,KAAK;IAChE;IAEA,2BAA2B;IAC3B,MAAM,WAAW,CAAC,WAAmB;QAClC,2DAA2D;QAC5D,IAAI,eAAe,WAAW,OAAO,EAAE;QAEvC,MAAM,WAAkB;YACtB,IAAI,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,SAAS,CAAC,GAAG;YAC5C;YACA,WAAW,IAAI;QACjB;QACA,YAAY,CAAC,OACX,KAAK,GAAG,CAAC,CAAC,UACR,QAAQ,EAAE,KAAK,YACX;oBAAE,GAAG,OAAO;oBAAE,SAAS;2BAAI,QAAQ,OAAO;wBAAE;qBAAS;oBAAE,QAAQ;gBAAW,IAC1E;QAGR,cAAc,CAAC,OAAS,OAAO;IACjC;IAEA,iBAAiB;IACjB,OACE,oDAAoD;kBACpD,8OAAC;QACG,WAAW,CAAC,wDAAwD,EAChE,kBAAkB,oBAAoB,cAAc,+BAA+B;UACrF;QACF,aAAa;QACb,gCAAgC;QAChC,aAAa,CAAC,IAAM,EAAE,cAAc;;0BAGtC,8OAAC,0LAAA,CAAA,SAAM,CAAC,GAAG;gBACT,KAAK;gBACL,WAAU;gBACV,OAAO;oBACL,OAAO,UAAU,KAAK;oBACtB,QAAQ,UAAU,MAAM;oBACvB,sCAAsC;oBACvC,GAAG;oBACH,GAAG;oBACH,0BAA0B;oBAC1B,iBAAiB,CAAC,+iCAA+iC,CAAC;oBAClkC,gBAAgB;oBAChB,oBAAoB;oBACpB,iGAAiG;oBACjG,eAAe;gBACjB;0BAIA,cAAA,8OAAC;oBACG,WAAU;oBACV,8EAA8E;oBAC9E,OAAO;wBAAE,QAAQ,kBAAkB,aAAa;oBAAO;8BAIzD,cAAA,8OAAC,yLAAA,CAAA,kBAAe;kCACb,SAAS,GAAG,CAAC,CAAC,wBACb,8OAAC,mIAAA,CAAA,UAAgB;gCAEf,SAAS;gCACT,cAAc,CAAC,CAAC,QAAQ,YAAY;gCACpC,kBAAkB;gCAClB,UAAU;gCACV,YAAY;gCACZ,4EAA4E;gCAC3E,MAAM;gCACN,UAAU;gCACV,iEAAiE;gCACjE,YAAY;oCAAE,MAAM;oCAAU,UAAU,0BAA0B;oCAAM,QAAQ;gCAAI;+BAVhF,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;0BAkBzB,8OAAC;gBAAI,WAAU;0BACX,cAAA,8OAAC,yLAAA,CAAA,kBAAe;oBAAC,MAAK;8BACrB,CAAC,kBACA,8BAA8B;kCAC9B,8OAAC,0LAAA,CAAA,SAAM,CAAC,GAAG;wBAET,SAAS;4BAAE,GAAG;4BAAI,SAAS;wBAAE;wBAC7B,SAAS;4BAAE,GAAG;4BAAG,SAAS;wBAAE;wBAC5B,MAAM;4BAAE,GAAG;4BAAI,SAAS;wBAAE;wBAC1B,YAAY;4BAAE,UAAU;wBAAI;kCAE5B,cAAA,8OAAC,2HAAA,CAAA,SAAM;4BACL,SAAS,IAAM,CAAC,eAAe,mBAAmB;4BAClD,WAAU;4BACV,UAAU,eAAe;4BACzB,cAAW;sCAGV,+BACG,8OAAC,iNAAA,CAAA,UAAO;gCAAC,WAAU;;;;;qDAEnB,8OAAC,kMAAA,CAAA,OAAI;gCAAC,WAAU;;;;;;;;;;;uBAhBlB;;;;+BAqBN,gCAAgC;kCAChC,8OAAC,0LAAA,CAAA,SAAM,CAAC,GAAG;wBAET,SAAS;4BAAE,GAAG;4BAAI,SAAS;4BAAG,OAAO;wBAAK;wBAC1C,SAAS;4BAAE,GAAG;4BAAG,SAAS;4BAAG,OAAO;wBAAE;wBACtC,MAAM;4BAAE,GAAG;4BAAI,SAAS;4BAAG,OAAO;wBAAK;wBACvC,YAAY;4BAAE,MAAM;4BAAU,WAAW;4BAAK,SAAS;wBAAG;wBAC1D,WAAU,WAAW,yBAAyB;;;0CAG9C,8OAAC;gCAAI,WAAU;;;;;;0CAEf,8OAAC;gCAAK,UAAU;gCAAY,WAAU;;kDACpC,8OAAC;wCAAI,WAAU;kDACb,cAAA,8OAAC,wNAAA,CAAA,gBAAiB;4CAAC,WAAU;;;;;;;;;;;kDAE/B,8OAAC,6HAAA,CAAA,WAAQ;wCACP,OAAO;wCACP,UAAU,CAAC,IAAM,kBAAkB,EAAE,MAAM,CAAC,KAAK;wCACjD,aAAY;wCACZ,WAAU;wCACV,SAAS;wCACT,WAAW,CAAC;4CACV,IAAI,EAAE,GAAG,KAAK,WAAW,CAAC,EAAE,QAAQ,EAAE;gDACpC,EAAE,cAAc;gDAChB,aAAa,8BAA8B;;4CAC7C,OAAO,IAAI,EAAE,GAAG,KAAK,UAAU;gDAC7B,mBAAmB;gDACnB,kBAAkB,IAAI,0BAA0B;;4CAClD;wCACF;wCACA,MAAM;wCACN,UAAU,kBAAkB;;;;;;oCAG7B,kBAAkB,CAAC,gCAClB,8OAAC,2HAAA,CAAA,SAAM;wCACL,MAAK;wCACL,SAAS;4CAAQ,kBAAkB;wCAAI;wCACvC,SAAQ;wCAAQ,MAAK;wCACrB,WAAU;;0DAEV,8OAAC,4LAAA,CAAA,IAAC;gDAAC,WAAU;;;;;;0DACb,8OAAC;gDAAK,WAAU;0DAAU;;;;;;;;;;;;kDAI9B,8OAAC,2HAAA,CAAA,SAAM;wCACL,MAAK;wCACL,WAAU;wCACV,UAAU,CAAC,eAAe,IAAI,MAAM,eAAe;wCACnD,cAAW;;4CAGV,+BACE,8OAAC,iNAAA,CAAA,UAAO;gDAAC,WAAU;;;;;qEAEpB,8OAAC,kMAAA,CAAA,OAAI;gDAAC,WAAU;;;;;;0DAGlB,8OAAC;gDAAK,WAAU;0DAAU;;;;;;;;;;;;;;;;;;;uBA1D1B;;;;;;;;;;;;;;;;;;;;;AAmElB","debugId":null}}]
}